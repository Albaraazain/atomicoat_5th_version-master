{
    "sourceFile": "lib/modules/system_operation_also_main_module/providers/recipe_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1726411660069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726412330829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // lib/modules/system_operation_also_main_module/providers/recipe_provider.dart\r\n \r\n import 'dart:async';\r\n \r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/providers/system_provider.dart';\r\n import 'package:flutter/foundation.dart';\r\n import '../models/system_component.dart';\r\n import '../models/recipe.dart';\r\n \r\n"
                }
            ],
            "date": 1726411660069,
            "name": "Commit-0",
            "content": "// lib/modules/system_operation_also_main_module/providers/recipe_provider.dart\r\n\r\nimport 'dart:async';\r\n\r\nimport 'package:flutter/foundation.dart';\r\nimport '../models/system_component.dart';\r\nimport '../models/recipe.dart';\r\n\r\nclass RecipeProvider with ChangeNotifier {\r\n  late final SystemStateProvider systemStateProvider;\r\n\r\n  List<Recipe> _recipes = [];\r\n  Recipe? _selectedRecipe;\r\n  Recipe? _activeRecipe;\r\n  int _currentStepIndex = -1;\r\n  bool _isRunning = false;\r\n  Timer? _recipeTimer;\r\n\r\n  List<Recipe> get recipes => _recipes;\r\n  Recipe? get selectedRecipe => _selectedRecipe;\r\n  Recipe? get activeRecipe => _activeRecipe;\r\n  int get currentStepIndex => _currentStepIndex;\r\n  bool get isRunning => _isRunning;\r\n\r\n  RecipeProvider({required this.systemStateProvider}) {\r\n    _loadSampleRecipes();\r\n  }\r\n\r\n  void _loadSampleRecipes() {\r\n    _recipes = [\r\n      Recipe(\r\n        id: 'sample_recipe_1',\r\n        name: 'Sample ALD Recipe',\r\n        substrate: 'Silicon Wafer',\r\n        steps: [\r\n          RecipeStep(\r\n            type: StepType.valve,\r\n            parameters: {'valveType': ValveType.valveA, 'duration': 5},\r\n          ),\r\n          RecipeStep(\r\n            type: StepType.purge,\r\n            parameters: {'duration': 10},\r\n          ),\r\n          RecipeStep(\r\n            type: StepType.valve,\r\n            parameters: {'valveType': ValveType.valveB, 'duration': 5},\r\n          ),\r\n          RecipeStep(\r\n            type: StepType.purge,\r\n            parameters: {'duration': 10},\r\n          ),\r\n        ],\r\n      ),\r\n    ];\r\n    notifyListeners();\r\n  }\r\n\r\n  void selectRecipe(String id) {\r\n    try {\r\n      _selectedRecipe = _recipes.firstWhere((recipe) => recipe.id == id);\r\n      notifyListeners();\r\n    } catch (e) {\r\n      // Handle the error, maybe log it or notify the user\r\n      _addLogEntry('Recipe with id $id not found.', ComponentStatus.warning);\r\n    }\r\n  }\r\n\r\n  void updateRecipe(Recipe oldRecipe, Recipe newRecipe) {\r\n    int index = _recipes.indexOf(oldRecipe);\r\n    if (index != -1) {\r\n      _recipes[index] = newRecipe;\r\n      if (_selectedRecipe == oldRecipe) {\r\n        _selectedRecipe = newRecipe;\r\n      }\r\n      if (_activeRecipe == oldRecipe) {\r\n        _activeRecipe = newRecipe;\r\n      }\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  void deleteRecipe(String recipeId) {\r\n    _recipes.removeWhere((recipe) => recipe.id == recipeId);\r\n    if (_selectedRecipe?.id == recipeId) {\r\n      _selectedRecipe = null;\r\n    }\r\n    if (_activeRecipe?.id == recipeId) {\r\n      stopRecipe();\r\n    }\r\n    notifyListeners();\r\n  }\r\n\r\n\r\n\r\n  Future<void> executeSelectedRecipe() async {\r\n    if (_selectedRecipe != null && !_isRunning) {\r\n      _activeRecipe = _selectedRecipe;\r\n      _isRunning = true;\r\n      _currentStepIndex = 0;\r\n      notifyListeners();\r\n      _executeCurrentStep();\r\n    }\r\n  }\r\n\r\n  void startRecipe() {\r\n    if (_activeRecipe != null && !_isRunning) {\r\n      _isRunning = true;\r\n      _executeCurrentStep();\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  void stopRecipe() {\r\n    if (_isRunning) {\r\n      _recipeTimer?.cancel();\r\n      _isRunning = false;\r\n      _activeRecipe = null;\r\n      _currentStepIndex = -1;\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  void _executeCurrentStep() {\r\n    if (_activeRecipe == null || _currentStepIndex >= _activeRecipe!.steps.length) {\r\n      stopRecipe();\r\n      return;\r\n    }\r\n\r\n    RecipeStep currentStep = _activeRecipe!.steps[_currentStepIndex];\r\n    _addLogEntry('Executing Step ${_currentStepIndex + 1}: ${_getStepTitle(currentStep)}', ComponentStatus.normal);\r\n    systemStateProvider.handleRecipeStep(currentStep);\r\n\r\n    // Simulate step duration\r\n    _recipeTimer = Timer(Duration(seconds: currentStep.parameters['duration'] ?? 5), () {\r\n      _currentStepIndex++;\r\n      _executeCurrentStep();\r\n    });\r\n  }\r\n\r\n  String _getStepTitle(RecipeStep step) {\r\n    switch (step.type) {\r\n      case StepType.loop:\r\n        return 'Loop ${step.parameters['iterations']} times';\r\n      case StepType.valve:\r\n        return '${step.parameters['valveType'] == ValveType.valveA ? 'Valve A' : 'Valve B'} for ${step.parameters['duration']}s';\r\n      case StepType.purge:\r\n        return 'Purge for ${step.parameters['duration']}s';\r\n      default:\r\n        return 'Unknown Step';\r\n    }\r\n  }\r\n\r\n  void _addLogEntry(String message, ComponentStatus severity) {\r\n    // Assuming SystemStateProvider has a method to add log entries\r\n    systemStateProvider.addLogEntry(message, severity);\r\n  }\r\n\r\n  // Method to add a new recipe\r\n  void addRecipe(Recipe recipe) {\r\n    _recipes.add(recipe);\r\n    notifyListeners();\r\n  }\r\n\r\n  // Method to remove a recipe\r\n  void removeRecipe(Recipe recipe) {\r\n    _recipes.remove(recipe);\r\n    if (_selectedRecipe == recipe) {\r\n      _selectedRecipe = null;\r\n    }\r\n    if (_activeRecipe == recipe) {\r\n      stopRecipe();\r\n    }\r\n    notifyListeners();\r\n  }\r\n\r\n  // Method to edit an existing recipe\r\n  void editRecipe(Recipe oldRecipe, Recipe newRecipe) {\r\n    int index = _recipes.indexOf(oldRecipe);\r\n    if (index != -1) {\r\n      _recipes[index] = newRecipe;\r\n      if (_selectedRecipe == oldRecipe) {\r\n        _selectedRecipe = newRecipe;\r\n      }\r\n      if (_activeRecipe == oldRecipe) {\r\n        _activeRecipe = newRecipe;\r\n      }\r\n      notifyListeners();\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}